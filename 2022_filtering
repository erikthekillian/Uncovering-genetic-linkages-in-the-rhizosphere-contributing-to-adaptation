library(BiocManager)
library(knitr)
library(gridExtra)
library(dada2)
library(phyloseq)
library(ggplot2)
library(ggpubr)
library(lme4)
library(plyr)
library(dplyr)
library(vegan)

### SOUTHWEST MONTANA 2022

setwd("~/Desktop/2022/Bozeman")
miseq_path <- "~/Desktop/2022/Bozeman/KillianBozemanV6V8"

fnFs <- sort(list.files(miseq_path, pattern="_R1_001.fastq"))
fnRs <- sort(list.files(miseq_path, pattern="_R2_001.fastq"))

# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sampleNames <- sapply(strsplit(fnFs, "_S"), `[`, 1)

# Specify the full path to the fnFs and fnRs
fnFs <- file.path(miseq_path, fnFs)
fnRs <- file.path(miseq_path, fnRs)

plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])

filt_path <- file.path(miseq_path, "filtered") # Place filtered files in filtered/ subdirectory
if(!file_test("-d", filt_path)) dir.create(filt_path)
filtFs <- file.path(filt_path, paste0(sampleNames, "_F_filt.fastq.gz"))
filtRs <- file.path(filt_path, paste0(sampleNames, "_R_filt.fastq.gz"))

# Set truncLen for F and R based on plotQualityProfile
out.BZ <- filterAndTrim(fwd=file.path(fnFs), filt=file.path(filtFs),
                     rev=file.path(fnRs), filt.rev=file.path(filtRs),
                     truncLen=c(275,210), maxEE=2, truncQ=2, maxN=0, trimLeft=5, rm.phix=TRUE,
                     compress=TRUE, verbose=FALSE, multithread=FALSE)

saveRDS(out.BZ, "out_BZ.RDS")
saveRDS(fnFs, "fnFs.RDS")
saveRDS(fnRs, "fnRs.RDS")
saveRDS(filtFs, "filtFs.RDS")
saveRDS(filtRs, "filtRs.RDS")

derepFs <- derepFastq(filtFs, verbose=TRUE) #n for low RAM PC's - try it out
saveRDS(derepFs, "derepFs_BZ.RDS")
derepRs <- derepFastq(filtRs, verbose=TRUE)
saveRDS(derepRs, "derepRs_BZ.RDS")


# Name the derep-class objects by the sample names
names(derepFs) <- sampleNames
names(derepRs) <- sampleNames

errF <- learnErrors(filtFs, multithread=TRUE, verbose = TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)

saveRDS(errF, "errF_BZ.RDS")
saveRDS(errR, "errR_BZ.RDS")

dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = TRUE)
saveRDS(dadaFs, "dadaFs_BZ.RDS")
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = TRUE)
saveRDS(dadaRs, "dadaRs_BZ.RDS")

mergers = mergePairs(dadaFs,derepFs,dadaRs,derepRs)
saveRDS(mergers, "mergers.RDS")

# Create merged seqtable
seqtabAll <- makeSequenceTable(mergers)
table(nchar(getSequences(seqtabAll)))
seqtabNoC_M <- removeBimeraDenovo(seqtabAll)
saveRDS(seqtabNoC_M, "SeqTabNoC_M.RDS")

# Create seqtable on forward reads
seqtabAll <- makeSequenceTable(dadaFs)
table(nchar(getSequences(seqtabAll)))
seqtabNoC_F <- removeBimeraDenovo(seqtabAll)
saveRDS(seqtabNoC_F, "SeqTabNoC_F.RDS")

# Assign Taxonomy based on mergers and Forward
fastaRef <- "silva_nr99_v138.1_wSpecies_train_set.fa.gz"

taxTab_M <- assignTaxonomy(seqtabNoC_M, refFasta = fastaRef, multithread=TRUE)
saveRDS(taxTab_M, "MtaxTab_BZ.RDS")

taxTab_F = assignTaxonomy(seqtabNoC_F, refFasta = fastaRef,multithread = TRUE)
saveRDS(taxTab_F,"FTaxTab.RDS")

### CENTRAL MONTANA 2022

setwd("~/Desktop/2022/CARC")
miseq_path <- "~/Desktop/2022/CARC/KillianCARCV6V8"

fnFs <- sort(list.files(miseq_path, pattern="_R1_001.fastq"))
fnRs <- sort(list.files(miseq_path, pattern="_R2_001.fastq"))

# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sampleNames <- sapply(strsplit(fnFs, "_S"), `[`, 1)

# Specify the full path to the fnFs and fnRs
fnFs <- file.path(miseq_path, fnFs)
fnRs <- file.path(miseq_path, fnRs)

plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])

filt_path <- file.path(miseq_path, "filtered") # Place filtered files in filtered/ subdirectory
if(!file_test("-d", filt_path)) dir.create(filt_path)
filtFs <- file.path(filt_path, paste0(sampleNames, "_F_filt.fastq.gz"))
filtRs <- file.path(filt_path, paste0(sampleNames, "_R_filt.fastq.gz"))

# Set truncLen for F and R based on plotQualityProfile
out.MO <- filterAndTrim(fwd=file.path(fnFs), filt=file.path(filtFs),
                     rev=file.path(fnRs), filt.rev=file.path(filtRs),
                     truncLen=c(200,100), maxEE=2, truncQ=2, maxN=0, trimLeft=5, rm.phix=TRUE,
                     compress=TRUE, verbose=FALSE, multithread=FALSE)

saveRDS(out.MO, "out_MO.RDS")
saveRDS(fnFs, "fnFs.RDS")
saveRDS(fnRs, "fnRs.RDS")
saveRDS(filtFs, "filtFs.RDS")
saveRDS(filtRs, "filtRs.RDS")

derepFs <- derepFastq(filtFs, verbose=TRUE) #n for low RAM PC's - try it out
saveRDS(derepFs, "derepFs_MO.RDS")
derepRs <- derepFastq(filtRs, verbose=TRUE)
saveRDS(derepRs, "derepRs_MO.RDS")


# Name the derep-class objects by the sample names
names(derepFs) <- sampleNames
names(derepRs) <- sampleNames

errF <- learnErrors(filtFs, multithread=TRUE, verbose = TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)

saveRDS(errF, "errF_MO.RDS")
saveRDS(errR, "errR_MO.RDS")

dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = TRUE)
saveRDS(dadaFs, "dadaFs_MO.RDS")
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = TRUE)
saveRDS(dadaRs, "dadaRs_MO.RDS")

mergers = mergePairs(dadaFs,derepFs,dadaRs,derepRs)
saveRDS(mergers, "mergers.RDS")

# Create merged seqtable
seqtabAll <- makeSequenceTable(mergers)
table(nchar(getSequences(seqtabAll)))
seqtabNoC_M <- removeBimeraDenovo(seqtabAll)
saveRDS(seqtabNoC_M, "SeqTabNoC_M.RDS")

# Create seqtable on forward reads
seqtabAll <- makeSequenceTable(dadaFs)
table(nchar(getSequences(seqtabAll)))
seqtabNoC_F <- removeBimeraDenovo(seqtabAll)
saveRDS(seqtabNoC_F, "SeqTabNoC_F.RDS")

# Assign Taxonomy based on mergers and Forward
fastaRef <- "silva_nr99_v138.1_wSpecies_train_set.fa.gz"

taxTab_M <- assignTaxonomy(seqtabNoC_M, refFasta = fastaRef, multithread=TRUE)
saveRDS(taxTab_M, "MtaxTab_MO.RDS")

taxTab_F = assignTaxonomy(seqtabNoC_F, refFasta = fastaRef,multithread = TRUE)
saveRDS(taxTab_F,"FTaxTab_MO.RDS")

### SOUTH DAKOTA 2022

setwd("~/Desktop/2022/SD")
miseq_path <- "~/Desktop/2022/SD/Ewing2022ALL"

fnFs <- sort(list.files(miseq_path, pattern="_R1_001.fastq"))
fnRs <- sort(list.files(miseq_path, pattern="_R2_001.fastq"))

# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sampleNames <- sapply(strsplit(fnFs, "_S"), `[`, 1)

# Specify the full path to the fnFs and fnRs
fnFs <- file.path(miseq_path, fnFs)
fnRs <- file.path(miseq_path, fnRs)

plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])



filt_path <- file.path(miseq_path, "filtered") # Place filtered files in filtered/ subdirectory
if(!file_test("-d", filt_path)) dir.create(filt_path)
filtFs <- file.path(filt_path, paste0(sampleNames, "_F_filt.fastq.gz"))
filtRs <- file.path(filt_path, paste0(sampleNames, "_R_filt.fastq.gz"))

# Set truncLen for F and R based on plotQualityProfile
out.SD <- filterAndTrim(fwd=file.path(fnFs), filt=file.path(filtFs),
                     rev=file.path(fnRs), filt.rev=file.path(filtRs),
                     truncLen=c(275,200), maxEE=2, truncQ=2, maxN=0, trimLeft=5, rm.phix=TRUE,
                     compress=TRUE, verbose=FALSE, multithread=FALSE)

saveRDS(out.SD, "out_SD.RDS")
saveRDS(fnFs, "fnFs.RDS")
saveRDS(fnRs, "fnRs.RDS")
saveRDS(filtFs, "filtFs.RDS")
saveRDS(filtRs, "filtRs.RDS")

derepFs <- derepFastq(filtFs, verbose=TRUE) #n for low RAM PC's - try it out
saveRDS(derepFs, "derepFs_SD.RDS")
derepRs <- derepFastq(filtRs, verbose=TRUE)
saveRDS(derepRs, "derepRs_SD.RDS")


# Name the derep-class objects by the sample names
names(derepFs) <- sampleNames
names(derepRs) <- sampleNames

errF <- learnErrors(filtFs, multithread=TRUE, verbose = TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)

saveRDS(errF, "errF_SD.RDS")
saveRDS(errR, "errR_SD.RDS")

dadaFs <- dada(derepFs, err=errF, multithread=TRUE, verbose = TRUE)
saveRDS(dadaFs, "dadaFs_SD.RDS")
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, verbose = TRUE)
saveRDS(dadaRs, "dadaRs_SD.RDS")

mergers = mergePairs(dadaFs,derepFs,dadaRs,derepRs)
saveRDS(mergers, "mergers.RDS")


# Create merged seqtable
seqtabAll <- makeSequenceTable(mergers)
table(nchar(getSequences(seqtabAll)))
seqtabNoC_M <- removeBimeraDenovo(seqtabAll)
saveRDS(seqtabNoC_M, "SeqTabNoC_M.RDS")

# Create seqtable on forward reads
seqtabAll <- makeSequenceTable(dadaFs)
table(nchar(getSequences(seqtabAll)))
seqtabNoC_F <- removeBimeraDenovo(seqtabAll)
saveRDS(seqtabNoC_F, "SeqTabNoC_F.RDS")

# Assign Taxonomy based on mergers and Forward
fastaRef <- "silva_nr99_v138.1_wSpecies_train_set.fa.gz"

taxTab_M <- assignTaxonomy(seqtabNoC_M, refFasta = fastaRef, multithread=TRUE)
saveRDS(taxTab_M, "MtaxTab_SD.RDS")

taxTab_F = assignTaxonomy(seqtabNoC_F, refFasta = fastaRef,multithread = TRUE)
saveRDS(taxTab_F,"FTaxTab_SD.RDS")

